from Crypto.Util.number import isPrime, getRandomRange, inverse
from hashlib import sha256

# フラグの定義
FLAG = "flag{*****REDACTED*****}"

p
q = 115115115011511511511511511511501151151151150115115115115115115115115115115011

assert isPrime(p)
assert isPrime(q)
assert p % q == 1

h = 115
g = pow(h, (p-1)//q, p)
assert g > 1
print('g =', g)

x = getRandomRange(1, q)
y = pow(g, x, p)
print('y =', y)

def verify(m, r, s):
    assert r % q != 0
    assert s % q != 0
    z = int(sha256(m).hexdigest(), 16)
    w = inverse(s, q)
    v= pow(g, z * w, p) * pow(y, r * w, p)
    print('v ',v)
    return (v - r) % p == 0

m = b'flag'
z = int(sha256(m).hexdigest(), 16)

r = (pow(g,z,p)*y-1)*pow(q,-1,p)*q+1

s = 1
print('r ',r)
if verify(m, r, s):
    print('Congratulation! The flag is', FLAG)
else:
    print('Verification failed.')
